C--**--CH176--524--P:CAP--26:5:1999
C--**--CH152--524--A:H--20:5:1999
C--**--CH151--524--C:D--20:5:1999
C--**--CH150--524--U:D--20:5:1999
C TEST2 PROGRAM FOR MP PACKAGE
C
C THIS PROGRAM TESTS VARIOUS MP ROUTINES, ESPECIALLY THOSE NOT
C CALLED BY PROGRAM TEST.  IT COMPUTES THE CONSTANTS GIVEN IN
C COMPUTER APPROXIMATIONS (BY HART, CHENEY, LAWSON, MAEHLY,
C MESZTENYI, RICE, THACHER AND WITZGALL, JOHN WILEY, 1968),
C APPENDIX C, PP. 182-183, AND VARIOUS OTHER CONSTANTS
C WHICH ARE DESCRIBED IN THE COMMENTS BELOW.  THE CONSTANTS
C ARE COMPUTED TO 40 SIGNIFICANT FIGURES, WITH WORKING PRECISION
C EQUIVALENT TO AT LEAST 42 SIGNIFICANT FIGURES.  TO INCREASE
C THE PRECISION, IT IS ONLY NECESSARY TO ALTER THE STATEMENT
C IDECPL = 40, AND PERHAPS INCREASE THE DIMENSIONS OF THE
C ARRAYS (AND ALTER THE CALL TO MPSET ACCORDINGLY).
C
C TO RUN TEST2 THE FOLLOWING MP ROUTINES ARE REQUIRED -
C MPABS, MPADD, MPADDI, MPADDQ, MPADD2, MPADD3, MPART1,
C MPASIN, MPATAN, MPBERN, MPBESJ, MPBES2, MPCDM, MPCHK,
C MPCIM, MPCLR, MPCMD, MPCMDE, MPCMEF, MPCMF, MPCMI, MPCMIM,
C MPCMPA, MPCMPI, MPCMPR, MPCMR, MPCMRE, MPCOMP, MPCOS,
C MPCOSH, MPCQM, MPCRM, MPDAW, MPDIV, MPDIVI, MPDUMP,
C MPEI, MPEPS, MPERF, MPERFC, MPERF2, MPERF3, MPERR,
C MPEUL, MPEXP, MPEXP1, MPEXT, MPGAM, MPGAMQ, MPGCD,
C MPHANK, MPIN, MPLI, MPLN, MPLNGM, MPLNI, MPLNS, MPL235,
C MPMAXR, MPMINR, MPMLP, MPMUL, MPMULI, MPMULQ, MPMUL2,
C MPNEG, MPNZR, MPOUT, MPOUTE, MPOUT2, MPOVFL, MPPACK,
C MPPI, MPPIGL, MPPOLY, MPPWR, MPPWR2, MPQPWR, MPREC,
C MPROOT, MPSET, MPSIN, MPSIN1, MPSINH, MPSQRT, MPSTR, MPSUB,
C MPTAN, MPTANH, MPUNFL, MPUNPK, MPZETA, MP40D, MP40E,
C MP40F AND MP40G.
C
C CORRECT OUTPUT ON UNIVAC 1108 (EXECUTION TIME 102 SECONDS) IS
C AS FOLLOWS.  ON MACHINES WITH WORDLENGTH OTHER THAN 36 BITS
C THERE WILL BE SOME MINOR DIFFERENCES.  THE RESULTS GIVEN
C BELOW ARE CORRECTLY ROUNDED TO 40 SIGNIFICANT FIGURES.
C MOST OUTPUT IS IN FLOATING-POINT FORMAT, WITH THE LEFTMOST
C SIGNED INTEGER REPRESENTING THE DECIMAL EXPONENT.  HEADINGS
C HAVE BEEN DELETED.
C
C     -5  4.8481368110 9535993589 9141023579 479759564
C     -2  1.7453292519 9432957692 3690768488 612713443
C     -1  3.9269908169 8724154807 8304229099 378605246
C     -1  5.6418958354 7756286948 0794515607 725858441
C     -1  6.3661977236 7581343075 5350534900 574481378
C     -1  7.8539816339 7448309615 6608458198 757210493
C     -1  7.9788456080 2865355879 8921198687 637369517
C     -1  9.1893853320 4672741780 3297364056 176398614
C      0  1.5707963267 9489661923 1321691639 751442099
C      0  1.7724538509 0551602729 8167483341 145182798
C      0  2.3561944901 9234492884 6982537459 627163148
C      0  3.1415926535 8979323846 2643383279 502884197
C      0  6.2831853071 7958647692 5286766559 005768394
C     -1  3.6787944117 1442321595 5237701614 608674458
C     -1  7.7880078307 1404868245 1702669783 206472968
C      0  1.2840254166 8774148407 3420568062 436458336
C      0  2.7182818284 5904523536 0287471352 662497757
C     -1  5.7721566490 1532860606 5120900824 024310422
C      0  1.0905077326 6525765920 7010655760 707978993
C      0  1.1892071150 0272106671 7499970560 475915293
C      0  1.4142135623 7309504880 1688724209 698078570
C      0  3.1622776601 6837933199 8893544432 718533720
C      0  1.2599210498 9487316476 7210607278 228350570
C      0  1.5874010519 6819947475 1705639272 308260391
C      0  2.1544346900 3188372175 9293566519 350495259
C      0  4.6415888336 1277889241 0076350919 446576551
C      0  1.4426950408 8896340735 9924681001 892137427
C      0  3.3219280948 8736234787 0319429489 390175865
C     -1  3.4657359027 9972654708 6160607290 882840378
C     -1  6.9314718055 9945309417 2321214581 765680755
C      0  1.3862943611 1989061883 4464242916 353136151
C      0  2.3025850929 9404568401 7991454684 364207601
C     -1  3.0102999566 3981195213 7388947244 930267682
C     -1  4.3429448190 3251827651 1289189166 050822944
C     -1  1.3052619222 0051591548 4062278954 890101937
C     -1  1.9509032201 6128267848 2848684770 222409277
C     -1  2.5881904510 2520762348 8988376240 483283491
C     -1  5.0000000000 0000000000 0000000000 000000000
C     -1  7.0710678118 6547524400 8443621048 490392848
C     -1  8.6602540378 4438646763 7231707529 361834714
C     -1  2.4740395925 4522929596 8487048493 891958934
C     -1  4.7942553860 4203000273 2879352155 713880818
C     -1  8.4147098480 7896506652 5023216302 989996226
C     -1  9.2387953251 1286756128 1831893967 882868224
C     -1  9.6592582628 9068286749 7431997288 973676339
C     -2  9.8491403357 1642530771 9752129132 743229305
C     -1  1.9891236737 9658006911 5976226446 762285979
C     -1  2.6794919243 1122706472 5536584941 276330572
C     -1  4.1421356237 3095048801 6887242096 980785697
C     -1  5.7735026918 9625764509 1487805019 574556476
C      0  1.0000000000 0000000000 0000000000 000000000
C      0  1.7320508075 6887729352 7446341505 872366943
C     -1  2.5534192122 1036266504 4822364904 736782042
C     -1  5.4630248984 3790513255 1794657802 853832976
C      0  1.5574077246 5490223050 6974807458 360173087
C     -1  3.0334668360 7342391675 8839469412 998723842
C     -1  5.3451113595 0791641089 6859612953 629085820
C     -1  6.6817863791 9298919997 7576865230 807615525
C     -1  8.2067879082 8660330972 2819853310 115987674
C      0  1.2185035255 8797634479 5477230620 364055963
C      0  1.4966057626 6548901760 1135134942 476918692
C      0  1.8708684117 8938948108 5201334341 524431687
C      0  2.4142135623 7309504880 1688724209 698078570
C      0  3.2965582089 3832042687 8154216826 253709768
C      0  3.7320508075 6887729352 7446341505 872366943
C      0  5.0273394921 2584810451 4975071064 072385737
C      1  1.0153170387 6088604621 0714766341 947220377
C     -1  8.5163191370 4808012700 4060150609 260682003
C     -1  4.7200121576 8234767447 6683878725 009623642
C     -1  3.6318783834 6867331795 5937477889 247216476
C     -1  5.6682408890 5873937711 2449634671 602835403
C    -11  2.3699749040 8242201872 1147551606 796861398
C     -8  2.3266147948 6597645054 6482207237 974647586
C     -1  4.7693627620 4469873381 4183536431 305598090
C     -2  1.0000166674 1671131256 2227707199 038367857
C     -1 -5.2359877559 8298873077 1072305465 838140329
C      0  1.4292568534 7046940048 5532334664 724427105
C     -3  9.9996666866 6523820634 0116209279 548561369
C     -1 -6.4350110879 3284386802 8092287173 226380415
C      0  1.4711276743 0373459185 2875571761 730851855
C     -1  9.9997500015 6249565972 9003899468 320681723
C     -1  9.9750156206 6040032281 2868984747 920848320
C     -1  7.6519768655 7966551449 7175261026 632209093
C     -1 -2.4593576445 1348335197 7608624853 287538296
C     -2  1.9985850304 2231224242 2839095084 899068063
C     -2  2.4786686152 4201745613 3073111569 370878617
C     -3  4.9999375002 6041612413 2622612282 082222967
C     -2  4.9937526036 2419975563 3655243780 648405856
C     -1  4.4005058574 4933515959 6822037189 149131274
C     -2  4.3472746168 8614366697 4876802585 928830627
C     -2 -7.7145352014 1121580326 8549492723 447021161
C     -3  4.7283119070 8952391757 6071901216 916285418
C    -17  2.1701311384 0496728169 3651142150 815094613
C    -11  2.1693639603 7600238063 5265343042 715360913
C     -5  2.0938338002 3892699656 0701453800 780000026
C     -2 -1.4458842084 7851053177 4561260148 174874671
C     -2 -3.3525383144 1766742728 5301848429 116213846
C     -2 -2.4698010934 2024399653 5541028052 587615959
C   -274  2.3685983851 7441006877 9331157930 426751244
C   -201  2.3685191664 6761106989 6185607645 793014427
C   -128  2.3606104831 9718757702 9325106563 488361132
C    -55  1.6882549780 7489050929 6827170625 271452023
C     -2  9.6338173420 5036143761 5884024435 958149431
C     -3  7.1736423526 6012024786 7318411619 579007593
C   -671  1.3009244067 3808212844 5548553616 298220657
C   -507  1.3009048930 1743487288 7808473358 528762111
C   -343  1.2989549894 8331959674 8137632393 071785666
C   -179  1.1179435292 7916543308 5063648308 631625217
C    -22  1.5475552535 5320739136 3466511764 830851880
C     -2  1.1522597512 5390147811 2859948236 454927804
C  -3818  1.9449982621 7044605474 8125826967 690995132
C  -3018  1.9449922523 5362810181 1176793079 875375991
C  -2218  1.9443913643 2201086173 1787302600 779281025
C  -1418  1.8852294189 9992013304 4032342021 032255068
C   -620  8.5269170095 3604701577 6970746427 276966500
C     -2 -2.9872233755 6625895550 6328177917 819328443
C      0 -1.0000000000 0000000000 0000000000 000000000
C      0  2.0000000000 0000000000 0000000000 000000000
C     -3 -5.0002500375 0937828272 7375137642 333908163
C      0 -1.0000000000 0000000000 0000000000 000000000
C      0  2.0000000000 0000000000 0000000000 000000000
C     -2 -5.0253847187 5985280327 4841986071 548588791
C     -1 -8.4270079294 9714869341 2206350826 092592961
C      0  1.8427007929 4971486934 1220635082 609259296
C     -1 -5.3807950691 2768419136 3874204075 567547920
C     -1 -1.1246291601 8284892203 2750717439 683832217
C      0  1.1124629160 1828489220 3275071743 968383222
C     -2 -9.9335992397 8528611497 8869519231 223541097
C     -1  1.1246291601 8284892203 2750717439 683832217
C     -1  8.8753708398 1715107796 7249282560 316167783
C     -2  9.9335992397 8528611497 8869519231 223541097
C     -1  8.4270079294 9714869341 2206350826 092592961
C     -1  1.5729920705 0285130658 7793649173 907407039
C     -1  5.3807950691 2768419136 3874204075 567547920
C      0  1.0000000000 0000000000 0000000000 000000000
C    -45  2.0884875837 6254475700 0786294957 788611561
C     -2  5.0253847187 5985280327 4841986071 548588791
C      0  1.0000000000 0000000000 0000000000 000000000
C  -4346  6.4059614249 2173203902 1339148586 394148214
C     -3  5.0002500375 0937828272 7375137642 333908163
C    -38  3.9935994897 2441414091 9056205879 117156950
C      0  4.1135267188 7363330061 5263770795 138677800
C      3  9.9994228832 3162419080 5737422564 434215028
C      2  3.4470192403 5219895391 8716891440 225225102
C     17  1.2164510040 8832000000 0000000000 000000000
C   2564  4.0238726007 7093773543 7024339230 039857194
C   2566  1.2723011956 9505546418 2244180377 444569507
C     -1  5.0636564110 9758793656 5576104597 854320650
C     -1  8.6231887228 7683934101 9385139508 425355101
C     -1  5.8721391515 6929076677 8096356445 878942588
C     43 -1.3440585709 0806772420 6312775790 006793681
C     43  1.3440585709 0806772420 6312775790 006793681
C      0 -1.0000000000 0000000000 0000000000 000000000
C     -1  5.4402111088 9369813404 7476618513 772816836
C     -1 -8.3907152907 6452452258 8639478240 648345199
C     -1 -6.4836082745 9086671259 1249330098 086768169
C      4 -1.1013232874 7033933772 3652455484 636440290
C      4  1.1013232920 1033231397 2137609043 787996345
C     -1 -9.9999999587 7692763619 5928371382 757410508
C     -1 -8.4147098480 7896506652 5023216302 989996226
C     -1  5.4030230586 8139717400 9366074429 766037323
C      0 -1.5574077246 5490223050 6974807458 360173087
C      0 -1.1752011936 4380145688 2381850595 600815156
C      0  1.5430806348 1524377847 7905620757 061682602
C     -1 -7.6159415595 5764888119 4582826047 935904128
C     -2 -9.9833416646 8281523068 1419841062 202698992
C     -1  9.9500416527 8025766095 5619878038 702948386
C     -1 -1.0033467208 5450545058 0800457811 115368190
C     -1 -1.0016675001 9844025823 7293835219 050235149
C      0  1.0050041680 5580359898 7978442968 341644710
C     -2 -9.9667994624 9558171183 0508367835 218353896
C     -2  9.9833416646 8281523068 1419841062 202698992
C     -1  9.9500416527 8025766095 5619878038 702948386
C     -1  1.0033467208 5450545058 0800457811 115368190
C     -1  1.0016675001 9844025823 7293835219 050235149
C      0  1.0050041680 5580359898 7978442968 341644710
C     -2  9.9667994624 9558171183 0508367835 218353896
C     -1  8.4147098480 7896506652 5023216302 989996226
C     -1  5.4030230586 8139717400 9366074429 766037323
C      0  1.5574077246 5490223050 6974807458 360173087
C      0  1.1752011936 4380145688 2381850595 600815156
C      0  1.5430806348 1524377847 7905620757 061682602
C     -1  7.6159415595 5764888119 4582826047 935904128
C     -1 -5.4402111088 9369813404 7476618513 772816836
C     -1 -8.3907152907 6452452258 8639478240 648345199
C     -1  6.4836082745 9086671259 1249330098 086768169
C      4  1.1013232874 7033933772 3652455484 636440290
C      4  1.1013232920 1033231397 2137609043 787996345
C     -1  9.9999999587 7692763619 5928371382 757410508
C     -1 -5.0636564110 9758793656 5576104597 854320650
C     -1  8.6231887228 7683934101 9385139508 425355101
C     -1 -5.8721391515 6929076677 8096356445 878942588
C     43  1.3440585709 0806772420 6312775790 006793681
C     43  1.3440585709 0806772420 6312775790 006793681
C      0  1.0000000000 0000000000 0000000000 000000000
C     -6 -9.8751540620 1326563229 6229866117 770420857
C      0 -8.6330247045 7459431886 8214839534 681194494
C      0 -8.6332247045 7470542997 9359283979 131307872
C      0 -8.6331747074 9133043168 0769008811 191229212
C      0  1.8948459881 7263778131 7187616717 034389351
C     -1 -2.1942072601 8738420352 0116707114 601577789
C      0 -8.6330747074 9130265390 2916231033 088668742
C      0  1.8953896445 3923568431 1156778727 698692279
C     -1 -2.1934715012 9890999481 7548014468 423170294
C     -5  8.2586924267 5883918192 2758871133 560282243
C      0  3.1572230549 1259066109 7259584500 948433011
C     -1 -1.0755122583 8435580066 9495127853 382606748
C      0  6.1655995047 8729793752 2981752669 522749131
C      3  2.4922289762 4187775913 8440143998 524848990
C     -6 -4.1569689296 8532427740 2859810278 180384346
C      1  3.0126141584 0796299259 0174133903 218497960
C     41  2.7155527448 5387982191 4014642310 825410296
C    -46 -3.6835977616 8203218023 5192620508 118987655
C      2  1.7760965799 0152226687 6406239486 993179786
C    431  1.9720451371 4123830280 9645048412 023552690
C   -438 -5.0708930602 3516654992 7200999685 925144667
C      3  1.2461372158 9938845969 2771107529 059792487
C   4338  8.8076990836 7471444897 0900245119 101084640
C  -4347 -1.1353703396 3107175183 3431428951 800778261
C      0  1.2020569031 5959428539 9738161511 449990765
C      0  1.0823232337 1113819151 6003696541 167902775
C      0  1.0369277551 4336992633 1365486457 034168057
C      0  1.0009945751 2781808533 7145958900 319017006
C      0  1.0000009539 6203387279 6113152038 683449346
C      0  1.0000000000 0090949478 4026388928 253311839
C      1  2.2459157718 3610454734 2715220454 373502759
C      1  3.0958913717 0115855910 0259628453 669451579
C      0  3.1415926535 8979323846 2643383279 502884197
C      1  3.100627660751343
C      1  3.100627668029982014200000000000
C      1  3.1006276680 299820148
C     39  5.9154776185 8631224993 5148194956 040327282
C  1              -9     32768     0     0   ...
C  1     -8589934591         1     0     0   ...
C  1      8589934591     65535 65535 65535   ...
C        ************* ********** ********** **********
C      0  0.0000000000 0000000000 0000000000 000000000
C *** OVERFLOW OCCURRED IN MPDIV ***
C *** CALL TO MPOVFL, MP OVERFLOW OCCURRED ***
C *** EXECUTION TERMINATED BY CALL TO MPERR IN MP VERSION 780802 ***
C
C MPBESJ REQUIRES SPACE 14T+156 AND T.LE.25 FOR WORDLENGTH
C AT LEAST 16 BITS.
C T.LE.25 AND MP VARIABLES REQUIRE SPACE T+2.
C
C FOLLOWING ARE DATA ARRAYS FOR TEST ARGUMENTS
C
C     .. Parameters ..
      INTEGER RMAX
      PARAMETER (RMAX=15000)
C     ..
C     .. Scalars in Common ..
      INTEGER B,LUN,M,MXR,T
C     ..
C     .. Arrays in Common ..
      INTEGER R(RMAX)
C     ..
C     .. Local Scalars ..
      DOUBLE PRECISION DX
      REAL RX
      INTEGER I,I2,ID,IDECPL,IER,ILIM,J,N
C     ..
C     .. Local Arrays ..
      INTEGER J1(3),J10(3),J11(7),J12(7),J13(8),J14(4),J15(6),J16(6),
     +        J2(4),J3(3),J4(4),J5(6),J6(7),J7(12),J8(3),J9(3),PI(27),
     +        W(27),X(27),Y(27),Z(27)
C     ..
C     .. External Subroutines ..
      EXTERNAL MP40D,MP40F,MPADDQ,MPASIN,MPATAN,MPBESJ,MPCDM,MPCIM,
     +         MPCMDE,MPCMIM,MPCMRE,MPCOS,MPCOSH,MPCQM,MPCRM,MPDAW,
     +         MPDIV,MPDIVI,MPDUMP,MPEI,MPEPS,MPERF,MPERFC,MPERR,MPEUL,
     +         MPEXP,MPGAM,MPIN,MPLI,MPLN,MPLNI,MPMAXR,MPMINR,MPMUL,
     +         MPMULI,MPMULQ,MPNEG,MPOUT,MPPIGL,MPPOLY,MPPWR,MPPWR2,
     +         MPQPWR,MPREC,MPROOT,MPSET,MPSIN,MPSINH,MPSQRT,MPSUB,
     +         MPTAN,MPTANH,MPZETA
C     ..
C     .. Intrinsic Functions ..
      INTRINSIC ALOG,FLOAT,IABS,INT,MAX0
C     ..
C     .. Common blocks ..
      COMMON B,T,M,LUN,MXR,R
C     ..
C     .. Data statements ..
      DATA J1(1),J1(2),J1(3)/16200,45,2/
      DATA J2(1),J2(2),J2(3),J2(4)/-1,-4,4,1/
      DATA J3(1),J3(2),J3(3)/8,4,2/
      DATA J4(1),J4(2),J4(3),J4(4)/2,4,10,100/
      DATA J5(1),J5(2),J5(3)/24,16,12/
      DATA J5(4),J5(5),J5(6)/6,4,3/
      DATA J6(1),J6(2),J6(3)/32,16,12/
      DATA J6(4),J6(5),J6(6),J6(7)/8,6,4,3/
      DATA J7(1),J7(2),J7(3),J7(4)/9,15,18,21/
      DATA J7(5),J7(6),J7(7),J7(8)/27,30,33,36/
      DATA J7(9),J7(10),J7(11),J7(12)/39,40,42,45/
      DATA J8(1),J8(2),J8(3)/0,1,10/
      DATA J9(1),J9(2),J9(3)/1,-50,99/
      DATA J10(1),J10(2),J10(3)/4,-300,4000/
      DATA J11(1),J11(2),J11(3),J11(4)/-101,-13,1,33/
      DATA J11(5),J11(6),J11(7)/20,1000,2001/
      DATA J12(1),J12(2),J12(3)/3,7,10000/
      DATA J12(4),J12(5),J12(6),J12(7)/5,1,1,2/
      DATA J13(1),J13(2),J13(3)/1,9999,10001/
      DATA J13(4),J13(5),J13(6)/14514,10,100/
      DATA J13(7),J13(8)/1000,10000/
      DATA J14(1),J14(2),J14(3),J14(4)/-1,3,-4,2/
      DATA J15(1),J15(2),J15(3)/0,1,6/
      DATA J15(4),J15(5),J15(6)/73,164,800/
      DATA J16(1),J16(2),J16(3)/3,4,5/
      DATA J16(4),J16(5),J16(6)/10,20,40/
C     ..
C
C SET SIGNIFICANT FIGURES FOR OUTPUT
      IDECPL = 40
C USE TWO EXTRA DECIMAL DIGITS FOR WORKING.  THIS IS USUALLY
C (BUT NOT ALWAYS) SUFFICIENT TO GIVE CORRECTLY ROUNDED
C RESULTS.  THE OTHER PARAMETERS ARE THE OUTPUT
C LOGICAL UNIT (6), AND DIMENSIONS OF X AND R.
      CALL MPSET(6,IDECPL+2,27,506)
      WRITE (LUN,FMT=9000) B,T
C
C COMPUTE PI USING GAUSS-LAGRANGE METHOD
      CALL MPPIGL(PI)
C
C COMPUTE CONSTANTS GIVEN IN HART ET AL, IN APPROXIMATELY THE
C SAME ORDER AS GIVEN THERE.
      WRITE (LUN,FMT=9010)
C
C COMPUTE PI/64800, PI/180, PI/8
      CALL MPDIVI(PI,4,Y)
      DO 10 I = 1,3
          CALL MPDIVI(Y,J1(I),X)
C WRITE ON UNIT LUN (SEE CALL TO MPSET ABOVE).
          CALL MP40F(IDECPL,X)
   10 CONTINUE
C COMPUTE SQRT(1/PI)
      CALL MPROOT(PI,-2,X)
      CALL MP40F(IDECPL,X)
C COMPUTE 2/PI
      CALL MPDIVI(PI,2,Z)
      CALL MPREC(Z,Z)
      CALL MP40F(IDECPL,Z)
C PRINT PI/4 (ALREADY IN Y)
      CALL MP40F(IDECPL,Y)
C COMPUTE SQRT (2/PI)
      CALL MPSQRT(Z,X)
      CALL MP40F(IDECPL,X)
C COMPUTE LN(SQRT(2*PI))
      CALL MPMULI(PI,2,Z)
      CALL MPLN(Z,X)
      CALL MPDIVI(X,2,X)
      CALL MP40F(IDECPL,X)
C COMPUTE PI/2
      CALL MPDIVI(PI,2,X)
      CALL MP40F(IDECPL,X)
C COMPUTE SQRT (PI)
      CALL MPSQRT(PI,X)
      CALL MP40F(IDECPL,X)
C COMPUTE 3PI/4, PI, 2PI
      CALL MPMULQ(PI,3,4,X)
      CALL MP40F(IDECPL,X)
      CALL MP40F(IDECPL,PI)
      CALL MP40F(IDECPL,Z)
C COMPUTE EXP(-1), EXP(-1/4), EXP(1/4), EXP(1)
      DO 20 I = 1,4
          CALL MPCQM(1,J2(I),X)
          CALL MPEXP(X,X)
          CALL MP40F(IDECPL,X)
   20 CONTINUE
C COMPUTE EULERS CONSTANT
      CALL MPEUL(X)
      CALL MP40F(IDECPL,X)
C COMPUTE SQRT(SQRT(SQRT(2))), SQRT(SQRT(2)), SQRT(2)
      DO 30 I = 1,3
          CALL MPQPWR(2,1,1,J3(I),X)
          CALL MP40F(IDECPL,X)
   30 CONTINUE
C COMPUTE SQRT(10)
      CALL MPQPWR(10,1,1,2,X)
      CALL MP40F(IDECPL,X)
C COMPUTE CUBE ROOT OF 2, 4, 10, 100
      DO 40 I = 1,4
          CALL MPQPWR(J4(I),1,1,3,X)
          CALL MP40F(IDECPL,X)
   40 CONTINUE
C COMPUTE LOG2(E), LOG2(10)
      CALL MPLNI(2,W)
      CALL MPREC(W,Y)
      CALL MP40F(IDECPL,Y)
      CALL MPLNI(10,Z)
      CALL MPMUL(Z,Y,X)
      CALL MP40F(IDECPL,X)
C COMPUTE LN(SQRT(2)), LN(2), LN(4), LN(10)
      CALL MPDIVI(W,2,X)
      CALL MP40F(IDECPL,X)
      CALL MP40F(IDECPL,W)
      CALL MPMULI(W,2,X)
      CALL MP40F(IDECPL,X)
      CALL MP40F(IDECPL,Z)
C COMPUTE LOG10(2), LOG10(E)
      CALL MPDIV(W,Z,X)
      CALL MP40F(IDECPL,X)
      CALL MPREC(Z,X)
      CALL MP40F(IDECPL,X)
C COMPUTE SIN(PI/J) FOR J = 24, 16, 12, 6, 4, 3
C NOTE - ORDER IS SLIGHTLY DIFFERENT FROM HART ET AL HERE
      DO 50 I = 1,6
          CALL MPDIVI(PI,J5(I),X)
          CALL MPSIN(X,X)
          CALL MP40F(IDECPL,X)
   50 CONTINUE
C COMPUTE SIN(1/4), SIN(1/2), SIN(1)
      DO 60 I = 1,3
          CALL MPCQM(1,2** (3-I),X)
          CALL MPSIN(X,X)
          CALL MP40F(IDECPL,X)
   60 CONTINUE
C COMPUTE SIN(3PI/8), SIN(5PI/12)
      CALL MPMULQ(PI,3,8,X)
      CALL MPSIN(X,X)
      CALL MP40F(IDECPL,X)
      CALL MPMULQ(PI,5,12,X)
      CALL MPSIN(X,X)
      CALL MP40F(IDECPL,X)
C COMPUTE TAN (PI/J) FOR J = 32, 16, 12, 8, 6, 4, 3
C NOTE - ORDER IS SLIGHTLY DIFFERENT FROM HART ET AL
      DO 70 I = 1,7
          CALL MPDIVI(PI,J6(I),X)
          CALL MPTAN(X,X)
          CALL MP40F(IDECPL,X)
   70 CONTINUE
C COMPUTE TAN (1/4), TAN (1/2), TAN(1)
      DO 80 I = 1,3
          CALL MPCQM(1,2** (3-I),X)
          CALL MPTAN(X,X)
          CALL MP40F(IDECPL,X)
   80 CONTINUE
C COMPUTE TAN(J*PI/96) FOR J = 9, 15, 18, 21, 27, 30,
C                              33, 36, 39, 40, 42, 45
      CALL MPDIVI(PI,96,Y)
      DO 90 I = 1,12
          CALL MPMULI(Y,J7(I),X)
          CALL MPTAN(X,X)
          CALL MP40F(IDECPL,X)
   90 CONTINUE
C COMPUTE J(NU, PI/4) AND J(NU, PI/2) FOR NU = 0, 1, 10
      DO 100 I = 1,3
          CALL MPDIVI(PI,4,X)
          CALL MPBESJ(X,J8(I),X)
          CALL MP40F(IDECPL,X)
          CALL MPDIVI(PI,2,X)
          CALL MPBESJ(X,J8(I),X)
          CALL MP40F(IDECPL,X)
  100 CONTINUE
C COMPUTE ARCERF(1/2) USING NEWTONS METHOD WITH FIRST
C APPROXIMATION 0.4769
      CALL MPSQRT(PI,Y)
      CALL MPDIVI(Y,2,Y)
C COMPUTE NUMBER OF ITERATIONS NECESSARY
      ILIM = 1 + INT(ALOG(FLOAT(IDECPL+2)/3E0)/ALOG(2E0))
      CALL MPCRM(0.4769E0,X)
C COULD SAVE TIME BY REDUCING T AT FIRST (SEE EG MPREC)
      DO 110 I = 1,ILIM
          CALL MPERF(X,Z)
          CALL MPADDQ(Z,-1,2,Z)
          CALL MPMUL(X,X,W)
          CALL MPEXP(W,W)
          CALL MPMUL(W,Y,W)
          CALL MPMUL(W,Z,Z)
          CALL MPSUB(X,Z,X)
  110 CONTINUE
      CALL MP40F(IDECPL,X)
C
C FINISHED WITH CONSTANTS IN HART ET AL, NOW COMPUTE SOME MORE
C TO TEST OTHER MP ROUTINES
C
      WRITE (LUN,FMT=9020)
C COMPUTE ASIN(1/100), ASIN(-1/2), ASIN(99/100)
      DO 120 I = 1,3
          CALL MPCQM(J9(I),100,X)
          CALL MPASIN(X,X)
          CALL MP40F(IDECPL,X)
  120 CONTINUE
C COMPUTE ATAN(1/100), ATAN(-3/4), ATAN(10)
      DO 130 I = 1,3
          CALL MPCQM(J10(I),400,X)
          CALL MPATAN(X,X)
          CALL MP40F(IDECPL,X)
  130 CONTINUE
      WRITE (LUN,FMT=9030)
C COMPUTE J(NU, X) FOR X = 0.01, 0.1, 1, 10, 100, 1000
C                  AND NU = 0, 1, 6, 73, 164, 800
      DO 150 I = 1,6
          DO 140 J = 1,6
              IF (J.LT.3) CALL MPCQM(1,10** (3-J),X)
              IF (J.GE.3) CALL MPCQM(10** (J-3),1,X)
C MPBESJ REQUIRES ABS(NU).LE.MAX(B,64), SO SKIP IF THIS IS NOT
C TRUE (SHOULD ONLY OCCUR IF WORDLENGTH LESS THAN 24 BITS)
              IF (IABS(J15(I)).GT.MAX0(B,64)) GO TO 150
              CALL MPBESJ(X,J15(I),X)
              CALL MP40F(IDECPL,X)
  140     CONTINUE
  150 CONTINUE
      WRITE (LUN,FMT=9040)
C COMPUTE ERF(X), ERFC(X), AND DAW(X) (DAWSONS INTEGRAL) FOR
C X = -100, -10, -1, -0.1, 0.1, 1, 10, 100
      DO 160 I = 1,8
          IF (I.LE.4) CALL MPCQM(10** (4-I),-10,X)
          IF (I.GT.4) CALL MPCQM(10** (I-5),10,X)
          CALL MPERF(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPERFC(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPDAW(X,Y)
          CALL MP40F(IDECPL,Y)
  160 CONTINUE
      WRITE (LUN,FMT=9050)
C COMPUTE GAMMA(X) FOR X = -101/3, -13/7, 1/10000, 33/5, 20,
C                          1000, 2001/2
      DO 170 I = 1,7
          CALL MPCQM(J11(I),J12(I),X)
          CALL MPGAM(X,X)
          CALL MP40F(IDECPL,X)
  170 CONTINUE
      WRITE (LUN,FMT=9060)
C COMPUTE SIN(X), COS(X), TAN(X), SINH(X), COSH(X) AND TANH(X)
C FOR X = -100, -10, -1, -0.1, 0.1, 1, 10, 100
      DO 180 I = 1,8
          IF (I.LE.4) CALL MPCQM(10** (4-I),-10,X)
          IF (I.GT.4) CALL MPCQM(10** (I-5),10,X)
          CALL MPSIN(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPCOS(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPTAN(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPSINH(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPCOSH(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPTANH(X,Y)
          CALL MP40F(IDECPL,Y)
  180 CONTINUE
      WRITE (LUN,FMT=9070)
C COMPUTE LI(X), EI(X), EI(-X) FOR X = 1/10000, 9999/10000,
C 10001/10000, 14514/10000, 10, 100, 1000, 10000
      DO 190 I = 1,8
          ID = 10000
          IF (I.GT.4) ID = 1
          CALL MPCQM(J13(I),ID,X)
          CALL MPLI(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPEI(X,Y)
          CALL MP40F(IDECPL,Y)
          CALL MPNEG(X,X)
          CALL MPEI(X,Y)
          CALL MP40F(IDECPL,Y)
  190 CONTINUE
      WRITE (LUN,FMT=9080)
C COMPUTE ZETA(I) FOR I = 3, 4, 5, 10, 20, 40
      DO 200 I = 1,6
          CALL MPZETA(J16(I),X)
          CALL MP40F(IDECPL,X)
  200 CONTINUE
      WRITE (LUN,FMT=9090)
C COMPUTE PI**E USING MPPWR2
      CALL MPCIM(1,X)
      CALL MPEXP(X,X)
      CALL MPPWR2(PI,X,X)
      CALL MP40F(IDECPL,X)
C COMPUTE 2*PI**3 - 4*PI**2 + 3*PI - 1 USING MPPOLY
      CALL MPPOLY(PI,X,J14,4)
      CALL MP40F(IDECPL,X)
C CONVERT PI TO CHARACTER FORMAT USING MPOUT, THEN BACK TO
C MP FORMAT USING MPIN
      I2 = 3*T + 12
      CALL MPOUT(PI,R(I2),IDECPL+2,IDECPL)
      CALL MPIN(R(I2),X,IDECPL+2,IER)
C IER SHOULD BE ZERO
      IF (IER.NE.0) CALL MPERR
      CALL MP40F(IDECPL,X)
C CONVERT PI**3 TO EXPONENT AND SINGLE-PRECISION FRACTION
      CALL MPPWR(PI,3,X)
      CALL MPCMRE(X,N,RX)
      WRITE (LUN,FMT=9100) N,RX
C NOW CONVERT TO EXPONENT AND DOUBLE-PRECISION FRACTION
      CALL MPCMDE(X,N,DX)
      WRITE (LUN,FMT=9110) N,DX
C CONVERT BACK TO MULTIPLE-PRECISION
      CALL MPCDM(DX* (10D0**N),X)
C AND PRINT (NUMBER OF PLACES AGREEMENT DEPENDS ON
C FLOATING-POINT FRACTION LENGTH)
      CALL MP40F(20,X)
C COMPUTE INTEGER PART OF PI**80
      CALL MPPWR(PI,80,X)
      CALL MPCMIM(X,X)
      CALL MP40F(IDECPL,X)
C DUMP MACHINE-PRECISION, MINREAL AND MAXREAL (THESE DEPEND
C ON BASE AND NUMBER OF DIGITS, AND HENCE ON THE WORDLENGTH
C OF THE MACHINE USED).
      CALL MPEPS(X)
      CALL MPDUMP(X)
      CALL MPMINR(X)
      CALL MPDUMP(X)
      CALL MPMAXR(Y)
      CALL MPDUMP(Y)
C PRINT USING MP40D (Y IS TOO LARGE SO MPOUT GIVES
C ALL ASTERISKS)
      CALL MP40D(IDECPL,Y)
C CAUSE AN MP UNDERFLOW (RESULT Z WILL BE SET TO ZERO BY MPUNFL)
      CALL MPMUL(X,X,Z)
      CALL MP40F(IDECPL,Z)
C NOW FINISH BY CAUSING AN MP OVERFLOW
      CALL MPDIV(Y,X,Z)
C SHOULD NEVER REACH HERE AS EXECUTION TERMINATED BY MPERR
      CALL MPDUMP(Z)
      STOP

 9000 FORMAT ('1TEST2 OF MP PACKAGE,   BASE =',I9,',  DIGITS =',I3,///)
 9010 FORMAT (/' CONSTANTS IN HART ET AL (ORDER DIFFERENT)',/)
 9020 FORMAT (/' TEST OF MPASIN AND MPATAN',/)
 9030 FORMAT (/' TEST OF MPBESJ',/)
 9040 FORMAT (/' TEST OF MPERF, MPERFC AND MPDAW',/)
 9050 FORMAT (/' TEST OF MPGAM',/)
 9060 FORMAT (/' TEST OF MPSIN, COS, TAN, SINH, COSH, TANH',/)
 9070 FORMAT (/' TEST OF MPLI AND MPEI',/)
 9080 FORMAT (/' TEST OF MPZETA',/)
 9090 FORMAT (/' TEST OF VARIOUS MP ROUTINES',/)
 9100 FORMAT (1X,I6,F19.15)
 9110 FORMAT (1X,I6,F34.30)
      END
